package com.example.api.controllers;

import static com.google.common.base.Preconditions.*;

import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.api.model.User;
import com.example.api.repositories.UserRepository;
import com.google.common.collect.Lists;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@RestController
public class UserController extends AbstractApiController
{
	@Autowired
	private UserRepository userRepo;

	public static final String ROLE_USER = "ROLE_USER";
	public static final String ROLE_ADMIN = "ROLE_ADMIN";

	private static final String CLAIM_SECRET_SIGNATURE = "secretkey"; // this can be autogenerated on app bootstrap

	@PostConstruct
	public void postConstruct()
	{
		userRepo.save(Lists.newArrayList(
		      new User("user", "user")
		            .addRoles(ROLE_USER),
		      new User("admin", "admin")
		            .addRoles(ROLE_USER)
		            .addRoles(ROLE_ADMIN)));
	}

	@CrossOrigin()
	@RequestMapping(value = "/user/login", method = RequestMethod.POST)
	public LoginResponse login(@RequestBody final UserLogin login)
	      throws ServletException
	{
		if (login.name == null || !checkCredentials(login))
		{
			throw new ServletException("Invalid login");
		}

		User user = userRepo.getByUsername(login.name);

		return new LoginResponse(signClaim(Jwts.builder().setSubject(login.name)
		      .claim("roles", user.getRoles()).setIssuedAt(new Date()))
		            .compact());
	}

	@RequestMapping(value = API_PATH + "/role/{role}", method = RequestMethod.GET)
	public Boolean hasRole(@PathVariable final String role,
	      final HttpServletRequest request) throws ServletException
	{
		return _hasRole(role, request);
	}

	private static Boolean _hasRole(final String role,
	      final HttpServletRequest request) throws ServletException
	{
		final Claims claims = (Claims) request.getAttribute("claims");

		return ((List<String>) claims.get("roles")).contains(role);
	}

	public static JwtBuilder signClaim(JwtBuilder jwtBuilder)
	{
		return jwtBuilder.signWith(SignatureAlgorithm.HS256, CLAIM_SECRET_SIGNATURE);
	}

	public static JwtParser setParsingKey(JwtParser jwtParser)
	{
		return checkNotNull(jwtParser).setSigningKey(CLAIM_SECRET_SIGNATURE);
	}

	private boolean checkCredentials(UserLogin login)
	{
		User user = userRepo.getByUsername(login.name);
		if (user == null)
			return false;

		return user.getPassword().equals(login.password);
	}

	public static void checkAuthorization(final String role, final HttpServletRequest request) throws ServletException
	{
		if (!_hasRole(role, request).booleanValue())
		{
			throw new ServletException("Insuficient rights");
		}
	}

	public static class UserLogin
	{
		public String name;
		public String password;
	}

	public static class LoginResponse
	{
		public String token;

		public LoginResponse(final String token)
		{
			this.token = token;
		}
	}
}
