buildscript {
	ext {
		springBootVersion = '1.3.5.RELEASE'
	}
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot' 

jar {
	baseName = 'petstore'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
}


dependencies {
	compile('org.springframework.boot:spring-boot-devtools')
	compile("org.springframework.boot:spring-boot-starter-web")

	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-test')
	compile("org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}")

	compile("com.h2database:h2")

	compile('org.springframework.boot:spring-boot-starter-data-rest')
	testCompile('org.springframework.boot:spring-boot-starter-test') 
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'

		file{
			whenMerged { classpath ->
				classpath.entries.removeAll { entry -> entry.kind == 'lib' }
				withXml { classpathXml ->
					def classpathXmlNode = classpathXml.asNode()					
					classpathXmlNode.'**'.findAll{ classpathentry -> 
						classpathentry.@kind == 'src' && classpathentry.@path in ['src/main/java', 'src/main/resources', 'src/test/java'] 
						
					}.each{ classpathentry -> 
						classpathentry.appendNode('attributes')
						  .appendNode('attribute', [name: 'FROM_GRADLE_MODEL', value: 'true'])
					}
					classpathXmlNode.appendNode('classpathentry',  [kind: 'con', path: 'org.eclipse.buildship.core.gradleclasspathcontainer'])
				}
			}
		}		 
	}	
}
